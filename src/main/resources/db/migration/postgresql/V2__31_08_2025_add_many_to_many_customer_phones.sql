-- STEP 0: CREATE THE EXTENSION 'unaccent' IF IT DOES NOT EXIST.
CREATE EXTENSION IF NOT EXISTS unaccent;

BEGIN;
ALTER TABLE phones RENAME TO phones_old;
ALTER TABLE phones_old RENAME CONSTRAINT phones_pkey TO old_phones_pkey;

-- STEP 1: SANITIZATION - ENSURE ONLY ONE PRIMARY PHONE PER CUSTOMER.
-- This step corrects cases where a customer has multiple phones marked as 'is_main = true'.
-- The rule applied is: keep only the phone with the highest ID (the most recent)
-- e downgrade all others to secondary (is_main = false).
UPDATE phones_old
SET is_main = false
WHERE id IN (
    -- Sub-query to find the IDs of the primary phones that need to be downgraded.
    SELECT id
    FROM (
        SELECT
            id,
            id_customer,
            -- The ROW_NUMBER() function enumerates the primary phones of each customer, ordering from the most recent (highest ID) to the oldest.
            ROW_NUMBER() OVER(PARTITION BY id_customer ORDER BY id DESC) as rn
        FROM phones_old
        WHERE is_main = true AND id_customer IS NOT NULL
    ) AS ranked_phones
    -- Select all primary phones that are not the first (the most recent).
    WHERE rn > 1
);


-- STEP 2: CREATE THE NEW TABLE 'phones' THAT WILL STORE UNIQUE PHONE NUMBERS.
CREATE TABLE phones (
	id int4 GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"number" varchar NOT NULL,
	alias varchar,
	CONSTRAINT phones_pkey PRIMARY KEY (id),
	CONSTRAINT phones_number_unique UNIQUE ("number")
);

-- STEP 3: POPULATE THE NEW TABLE 'phones' WITH THE DISTINCT NUMBERS FROM THE OLD TABLE.
INSERT INTO phones ("number")
SELECT DISTINCT "number" FROM phones_old;

-- STEP 4: CREATE THE NEW JOIN TABLE 'customer_phones'.
CREATE TABLE customer_phones (
	id_customer int4 NOT NULL,
	id_phone int4 NOT NULL,
	is_main bool NOT NULL DEFAULT false,
	CONSTRAINT customer_phones_pkey PRIMARY KEY (id_customer, id_phone),
	CONSTRAINT fk_customer FOREIGN KEY (id_customer) REFERENCES customers(id) ON DELETE CASCADE,
	CONSTRAINT fk_phone FOREIGN KEY (id_phone) REFERENCES phones(id) ON DELETE CASCADE
);

-- STEP 5: POPULATE THE JOIN TABLE WITH THE DATA FROM THE OLD TABLE (NOW ALREADY SANITIZED).
INSERT INTO customer_phones (id_customer, id_phone, is_main)
SELECT
    po.id_customer,
    p.id,
    po.is_main
FROM
    phones_old po
JOIN
    phones p ON po."number" = p."number"
WHERE
    po.id_customer IS NOT NULL;

-- STEP 6: Create the partial unique index. This step now works without errors,
-- because the data was corrected in STEP 5.
CREATE UNIQUE INDEX unique_main_phone_per_customer
ON customer_phones (id_customer)
WHERE is_main = true;

-- STEP 7: (Optional) Remove the old table after verifying the migration.
 DROP TABLE phones_old;

-- Commit the transaction.
COMMIT;

